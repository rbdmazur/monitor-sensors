openapi: 3.0.0
info:
  title: Monitor Sensors
  version: "0.1"
servers:
  - url: http://localhost:8080/api/
    description: Dev server
paths:
  /sensors:
    get:
      summary: Method to get all sensors
      tags:
        - Sensors
      operationId: findAll
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success response with list of sensors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sensors"
        'default':
          description: Any server errors
          content:
            string:
              example: Unknown error
  /sensors/create:
    post:
      summary: Method to create new sensor
      tags:
        - Sensors
      operationId: save
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/jsom:
            schema:
              $ref: "#/components/schemas/SensorRequest"
      responses:
        '200':
          description: Success creating
        '400':
          description: Bad request. Illegal arguments.
          content:
            string:
              example: Illegal arguments
        '401':
          description: User unathorized
        '403':
          description: Access denied. User isn't admin
  /sensors/edit/{id}:
    put:
      summary: Method to edit sensor
      tags:
        - Sensors
      operationId: update
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Sensor id
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/jsom:
            schema:
              $ref: "#/components/schemas/SensorEditRequest"
      responses:
        '200':
          description: Success editing
        '400':
          description: Bad request. Illegal arguments.
          content:
            string:
              example: Illegal arguments
        '401':
          description: User unathorized
        '403':
          description: Access denied. User isn't admin
  /sensors/delete/{id}:
    delete:
      summary: Method to delete sensor by id
      tags:
        - Sensors
      operationId: delete
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Sensor id
          schema:
            type: integer
      responses:
        '200':
          description: Success deleting
        '400':
          description: Bad request. Sensor with this id not found.
          content:
            string:
              example: Sensor not found
        '401':
          description: User unathorized
        '403':
          description: Access denied. User isn't admin
  /sensors/search/name:
    get:
      summary: Method to search sensors by name
      tags:
        - Search
      operationId: findByName
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: false
          description: Sensor name
          schema:
            type: string
      responses:
        '200':
          description: Success response with list of sensors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sensors"
        'default':
          description: Any server errors
          content:
            string:
              example: Unknown error
  /sensors/search/model:
    get:
      summary: Method to search sensors by model
      tags:
        - Search
      operationId: findByModel
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: false
          description: Sensor model
          schema:
            type: string
      responses:
        '200':
          description: Success response with list of sensors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sensors"
        'default':
          description: Any server errors
          content:
            string:
              example: Unknown error
  /auth/reg:
    post:
      summary: Method to reg new user
      tags:
        - Authentication
      operationId: register
      requestBody:
        required: true
        content:
          application/jsom:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '200':
          description: User registered successfully
        '400':
          description: Bad request. Username is already in use.
          content:
            string:
              example: Username is already in use
  /auth/login:
    post:
      summary: Method to login user
      tags:
        - Authentication
      operationId: login
      requestBody:
        required: true
        content:
          application/jsom:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '200':
          description: User login successfully
          content:
            string:
              example: jwt token
        '400':
          description: Bad request. Bad credentials.
          content:
            string:
              example: Bad credentials
          
      
  
  
  
components:
  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: user1
        password: 
          type: string
          example: "12345"
    SensorEditRequest:
      type: object
      properties:
        name:
          type: string
          example: Barometer
          minLength: 3
          maxLength: 30
        model:
          type: string
          example: ac-13
          maxLength: 15
        from:
          type: integer
          example: 12
          minimum: 0
          description: from parametr of Range. Must be less than to
        to:
          type: integer
          example: 25
          minimum: 0
        type:
          type: string
          example: Pressure
          enum:
            - Pressure
            - Temperature
            - Humidity
            - Voltage
        units: 
          type: string
          example: bar
          enum:
            - bar
            - voltage
            - °С
            - '%'
        location:
          type: string
          example: room
          maxLength: 40
        description: 
          type: string
          example: Simple description.
          maxLength: 200
    SensorRequest:
      type: object
      required:
        - name
        - model
        - to 
        - type
      properties:
        name:
          type: string
          example: Barometer
          minLength: 3
          maxLength: 30
        model:
          type: string
          example: ac-13
          maxLength: 15
        from:
          type: integer
          example: 12
          minimum: 0
          description: from parametr of Range. Must be less than to
        to:
          type: integer
          example: 25
          minimum: 0
        type:
          type: string
          example: Pressure
          enum:
            - Pressure
            - Temperature
            - Humidity
            - Voltage
        units: 
          type: string
          example: bar
          enum:
            - bar
            - voltage
            - °С
            - '%'
        location:
          type: string
          example: room
          maxLength: 40
        description: 
          type: string
          example: Simple description.
          maxLength: 200
    Sensor:
      type: object
      required:
        - name
        - model
        - to 
        - type
      properties:
        id:
          type: integer 
          example: 1
          readOnly: true
        name:
          type: string
          example: Barometer
          minLength: 3
          maxLength: 30
        model:
          type: string
          example: ac-13
          maxLength: 15
        range:
          type: object
          required:
            - to
          properties:
            from:
              type: integer
              example: 12
              minimum: 0
              description: from parametr of Range. Must be less than to
            to:
              type: integer
              example: 25
              minimum: 0
        type:
          type: string
          example: Pressure
          enum:
            - Pressure
            - Temperature
            - Humidity
            - Voltage
        units: 
          type: string
          example: bar
          enum:
            - bar
            - voltage
            - °С
            - '%'
        location:
          type: string
          example: room
          maxLength: 40
        description: 
          type: string
          example: Simple description.
          maxLength: 200
    Sensors:
      type: array
      items:
        $ref: "#/components/schemas/Sensor"